import java.util.PriorityQueue;
import java.util.Collections;

class MedianFinder {
    private PriorityQueue<Integer> low;  // Max-heap
    private PriorityQueue<Integer> high; // Min-heap

    public MedianFinder() {
        low = new PriorityQueue<>(Collections.reverseOrder());
        high = new PriorityQueue<>();
    }

    public void addNum(int num) {
        low.offer(num);                            // Add to max-heap
        high.offer(low.poll());                    // Balance: move largest from low to high

        if (low.size() < high.size()) {
            low.offer(high.poll());                // Maintain size property
        }
    }

    public double findMedian() {
        if (low.size() == high.size()) {
            return (low.peek() + high.peek()) / 2.0; // Even count
        }
        return low.peek();                           // Odd count
    }
}
